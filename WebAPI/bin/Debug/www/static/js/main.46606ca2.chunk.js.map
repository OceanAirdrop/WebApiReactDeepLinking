{"version":3,"sources":["pages/homepage.tsx","pages/page1.tsx","pages/page2.tsx","pages/page3.tsx","pages/notfound404.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HomePage","Page1","React","Component","Page2","useState","count","setCount","onClick","Page3","NotFound404","href","App","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0TAUeA,MARf,WAEI,OACI,6BACI,2CCOGC,E,uKARP,OACI,6BACI,2C,GALIC,IAAMC,W,QCiBXC,MAhBf,WAAmB,IAAD,EAEYC,mBAAS,GAFrB,mBAEPC,EAFO,KAEAC,EAFA,KAQd,OACI,6BACI,sCACA,0CAAgBD,EAAhB,UACA,4BAAQE,QARhB,WACID,EAASD,EAAQ,KAOb,cCFGG,E,uKARP,OACI,6BACI,2C,GALIP,IAAMC,WCYXO,MAZf,WAEI,OACI,6BACI,qCACA,yEACA,8CACA,uBAAGC,KAAK,KAAR,oBCoCGC,E,uKA9BP,OACI,kBAAC,IAAD,KACI,yBAAKC,UAAU,0DACX,uBAAGA,UAAU,eAAeF,KAAK,KAAjC,sBACA,4BAAQE,UAAU,iBAAiBC,KAAK,SAASC,cAAY,WAAWC,cAAY,oBAAoBC,gBAAc,mBAAmBC,gBAAc,QAAQC,aAAW,qBACtK,0BAAMN,UAAU,yBAEpB,yBAAKA,UAAU,2BAA2BO,GAAG,oBACzC,wBAAIP,UAAU,sBACV,4BAAI,kBAAC,IAAD,CAAMQ,GAAI,IAAKR,UAAU,YAAzB,SACJ,4BAAI,kBAAC,IAAD,CAAMQ,GAAI,SAAUR,UAAU,YAA9B,WACJ,4BAAI,kBAAC,IAAD,CAAMQ,GAAI,SAAUR,UAAU,YAA9B,WACJ,4BAAI,kBAAC,IAAD,CAAMQ,GAAI,SAAUR,UAAU,YAA9B,cAKhB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,IAAIC,UAAWxB,IACjC,kBAAC,IAAD,CAAOuB,KAAK,SAASC,UAAWvB,IAChC,kBAAC,IAAD,CAAOsB,KAAK,SAASC,UAAWpB,IAChC,kBAAC,IAAD,CAAOmB,KAAK,SAASC,UAAWf,IAChC,kBAAC,IAAD,CAAOc,KAAK,IAAIC,UAAWd,U,GAzB7BR,IAAMC,WCAJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.46606ca2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction HomePage() {\r\n\r\n    return (\r\n        <div>\r\n            <h1>Home Page</h1>\r\n        </div>\r\n    );\r\n}\r\nexport default HomePage;","import React from 'react';\r\n\r\nclass Page1 extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Page 1</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Page1;","import React, { useState } from 'react';\r\n\r\n\r\nfunction Page2( ) {\r\n\r\n    const [count, setCount] = useState(0);\r\n\r\n    function clickHandler() {\r\n        setCount(count + 1);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Page 2</h1>\r\n            <p>You clicked {count} times</p>\r\n            <button onClick={clickHandler}>Click me</button>\r\n        </div>\r\n    );\r\n}\r\nexport default Page2;","import React from 'react';\r\n\r\nclass Page3 extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Page 3</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Page3;","import React from 'react';\r\n\r\nfunction NotFound404() {\r\n\r\n    return (\r\n        <div>\r\n            <h1>Oops!</h1>\r\n            <h2> We can't find the page your looking for.</h2>\r\n            <p>Error Code: 404</p>\r\n            <a href=\"/\">Go To Homepage</a>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NotFound404; \r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\r\n\r\n// import pages\r\nimport HomePage from './pages/homepage';\r\nimport Page1 from './pages/page1';\r\nimport Page2 from './pages/page2';\r\nimport Page3 from './pages/page3';\r\nimport NotFound404 from './pages/notfound404';\r\n\nclass App extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark static-top\">\r\n                    <a className=\"navbar-brand\" href=\"/\">Test React Project</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarResponsive\">\r\n                        <ul className=\"navbar-nav ml-auto\">\r\n                            <li><Link to={'/'} className=\"nav-link\">Home</Link></li>\r\n                            <li><Link to={'/page1'} className=\"nav-link\">Page 1</Link></li>\r\n                            <li><Link to={'/page2'} className=\"nav-link\">Page 2</Link></li>\r\n                            <li><Link to={'/page3'} className=\"nav-link\">Page 3</Link></li>\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n\r\n                <Switch>\r\n                    <Route exact path='/' component={HomePage} />\r\n                    <Route path='/page1' component={Page1} />\r\n                    <Route path='/page2' component={Page2} />\r\n                    <Route path='/page3' component={Page3} />\r\n                    <Route path=\"*\" component={NotFound404} />\r\n                </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// css import\r\nimport './styles/global.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}